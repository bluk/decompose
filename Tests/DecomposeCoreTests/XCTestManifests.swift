//  Copyright 2018 Bryant Luk
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import XCTest

extension CombinatorsTextTests {
    static let __allTests = [
        ("testHexadecimalAsIntFailure", testHexadecimalAsIntFailure),
        ("testHexadecimalAsIntSuccess", testHexadecimalAsIntSuccess),
        ("testHexadecimalFailure", testHexadecimalFailure),
        ("testHexadecimalSuccess", testHexadecimalSuccess),
        ("testIsDigitFailure", testIsDigitFailure),
        ("testIsDigitSuccess", testIsDigitSuccess),
        ("testIsLetterFailure", testIsLetterFailure),
        ("testIsLetterSuccess", testIsLetterSuccess),
        ("testNewlineFailure", testNewlineFailure),
        ("testNewlineSuccessWithCarriageReturn", testNewlineSuccessWithCarriageReturn),
        ("testNewlineSuccessWithLinefeed", testNewlineSuccessWithLinefeed),
        ("testNonzeroDigitFailure", testNonzeroDigitFailure),
        ("testNonzeroDigitSuccess", testNonzeroDigitSuccess),
        ("testSignSuccessNegative", testSignSuccessNegative),
        ("testSignSuccessPositive", testSignSuccessPositive),
        ("testStringEmptyReturnValueFailure", testStringEmptyReturnValueFailure),
        ("testStringEmptyReturnValueSuccess", testStringEmptyReturnValueSuccess),
        ("testStringFailure", testStringFailure),
        ("testStringSuccess", testStringSuccess),
        ("testTabFailure", testTabFailure),
        ("testTabSuccess", testTabSuccess),
        ("testWhitespaceFailure", testWhitespaceFailure),
        ("testWhitespaceSuccessWithSpace", testWhitespaceSuccessWithSpace),
        ("testWhitespaceSuccessWithTab", testWhitespaceSuccessWithTab),
    ]
}

extension ParserTests {
    static let __allTests = [
        ("testAnyFailureWithUnavailableInput", testAnyFailureWithUnavailableInput),
        ("testAnySuccess", testAnySuccess),
        ("testApplyFailure", testApplyFailure),
        ("testApplySuccess", testApplySuccess),
        ("testBetweenFailure", testBetweenFailure),
        ("testBetweenFailureOnEmptyInput", testBetweenFailureOnEmptyInput),
        ("testBetweenFailureOnMissingClose", testBetweenFailureOnMissingClose),
        ("testBetweenFailureOnMissingOpen", testBetweenFailureOnMissingOpen),
        ("testBetweenSuccess", testBetweenSuccess),
        ("testChainl1Failure", testChainl1Failure),
        ("testChainl1FailureWithEmptyInput", testChainl1FailureWithEmptyInput),
        ("testChainl1Success", testChainl1Success),
        ("testChainl1SuccessWithOnlyOperand", testChainl1SuccessWithOnlyOperand),
        ("testChainlFailure", testChainlFailure),
        ("testChainlSuccess", testChainlSuccess),
        ("testChainlSuccessWithEmptyInput", testChainlSuccessWithEmptyInput),
        ("testChainlSuccessWithOneOperand", testChainlSuccessWithOneOperand),
        ("testChainr1Failure", testChainr1Failure),
        ("testChainr1FailureWithEmptyInput", testChainr1FailureWithEmptyInput),
        ("testChainr1Success", testChainr1Success),
        ("testChainr1SuccessWithOnlyOperand", testChainr1SuccessWithOnlyOperand),
        ("testChainrFailure", testChainrFailure),
        ("testChainrSuccess", testChainrSuccess),
        ("testChainrSuccessWithEmptyInput", testChainrSuccessWithEmptyInput),
        ("testChainrSuccessWithOneOperand", testChainrSuccessWithOneOperand),
        ("testChoiceFailure", testChoiceFailure),
        ("testChoiceSuccess", testChoiceSuccess),
        ("testCountFailureMissingCount", testCountFailureMissingCount),
        ("testCountFailureWithMoreInput", testCountFailureWithMoreInput),
        ("testCountFailureWithParse", testCountFailureWithParse),
        ("testCountFailureWithParseButSameCount", testCountFailureWithParseButSameCount),
        ("testCountSuccess", testCountSuccess),
        ("testCountSuccessWithAcceptEmptyParser", testCountSuccessWithAcceptEmptyParser),
        ("testCountSuccessWithAcceptEmptyParserInSequence", testCountSuccessWithAcceptEmptyParserInSequence),
        ("testEndBy1Failure", testEndBy1Failure),
        ("testEndBy1FailureWithEmptyInput", testEndBy1FailureWithEmptyInput),
        ("testEndBy1FailureWithOnlyValue", testEndBy1FailureWithOnlyValue),
        ("testEndBy1FailureWithSeparator", testEndBy1FailureWithSeparator),
        ("testEndBy1Success", testEndBy1Success),
        ("testEndBy1SuccessWithValueAndSeparator", testEndBy1SuccessWithValueAndSeparator),
        ("testEndByFailure", testEndByFailure),
        ("testEndByFailureWithOnlyValue", testEndByFailureWithOnlyValue),
        ("testEndByFailureWithSeparator", testEndByFailureWithSeparator),
        ("testEndByFailureWithValue", testEndByFailureWithValue),
        ("testEndBySuccess", testEndBySuccess),
        ("testEndBySuccessWithEmptyInput", testEndBySuccessWithEmptyInput),
        ("testEndOfInputFailure", testEndOfInputFailure),
        ("testEndOfInputSuccess", testEndOfInputSuccess),
        ("testFailSuccess", testFailSuccess),
        ("testMany1Failure", testMany1Failure),
        ("testMany1FailureWithEmptyInput", testMany1FailureWithEmptyInput),
        ("testMany1Success", testMany1Success),
        ("testMany1SuccessComplex", testMany1SuccessComplex),
        ("testManyFailure", testManyFailure),
        ("testManySuccess", testManySuccess),
        ("testManySuccessWithAcceptEmptyParser", testManySuccessWithAcceptEmptyParser),
        ("testManySuccessWithAcceptEmptyParserFollowedByParser", testManySuccessWithAcceptEmptyParserFollowedByParser),
        ("testManySuccessWithEmptyInput", testManySuccessWithEmptyInput),
        ("testManyTillFailureWithNoEndValue", testManyTillFailureWithNoEndValue),
        ("testManyTillFailureWithUnexpectedInput", testManyTillFailureWithUnexpectedInput),
        ("testManyTillSuccess", testManyTillSuccess),
        ("testManyTillSuccessWithAcceptEmptyEndParser", testManyTillSuccessWithAcceptEmptyEndParser),
        ("testManyTillSuccessWithAcceptEmptyManyAndParsers", testManyTillSuccessWithAcceptEmptyManyAndParsers),
        ("testManyTillSuccessWithAcceptEmptyManyParser", testManyTillSuccessWithAcceptEmptyManyParser),
        ("testManyTillSuccessWithNoValues", testManyTillSuccessWithNoValues),
        ("testMapFailure", testMapFailure),
        ("testMapSuccess", testMapSuccess),
        ("testNoneOfFailure", testNoneOfFailure),
        ("testNoneOfFailureWithUnavailableInput", testNoneOfFailureWithUnavailableInput),
        ("testNoneOfSuccess", testNoneOfSuccess),
        ("testOneOfFailure", testOneOfFailure),
        ("testOneOfFailureWithUnavailableInput", testOneOfFailureWithUnavailableInput),
        ("testOneOfSuccess", testOneOfSuccess),
        ("testOptionalAndEmptyWithParserFailure", testOptionalAndEmptyWithParserFailure),
        ("testOptionalAndEmptyWithParserSuccess", testOptionalAndEmptyWithParserSuccess),
        ("testOptionAndValueWithParserFailure", testOptionAndValueWithParserFailure),
        ("testOptionAndValueWithParserSuccess", testOptionAndValueWithParserSuccess),
        ("testOptionOptionalWithParserFailure", testOptionOptionalWithParserFailure),
        ("testOptionOptionalWithParserSuccess", testOptionOptionalWithParserSuccess),
        ("testOrFailure", testOrFailure),
        ("testOrSuccess", testOrSuccess),
        ("testPure", testPure),
        ("testSatisfyFailure", testSatisfyFailure),
        ("testSatisfySuccess", testSatisfySuccess),
        ("testSepBy1Failure", testSepBy1Failure),
        ("testSepBy1FailureWithEmptyInput", testSepBy1FailureWithEmptyInput),
        ("testSepBy1FailureWithSeparator", testSepBy1FailureWithSeparator),
        ("testSepBy1FailureWithValueAndSeparator", testSepBy1FailureWithValueAndSeparator),
        ("testSepBy1Success", testSepBy1Success),
        ("testSepBy1SuccessWithOnlyValue", testSepBy1SuccessWithOnlyValue),
        ("testSepByFailure", testSepByFailure),
        ("testSepByFailureWithSeparator", testSepByFailureWithSeparator),
        ("testSepByFailureWithValueAndSeparator", testSepByFailureWithValueAndSeparator),
        ("testSepBySuccess", testSepBySuccess),
        ("testSepBySuccessWithEmptyInput", testSepBySuccessWithEmptyInput),
        ("testSepBySuccessWithOnlyValue", testSepBySuccessWithOnlyValue),
        ("testSepEndBy1Failure", testSepEndBy1Failure),
        ("testSepEndBy1FailureWithEmptyInput", testSepEndBy1FailureWithEmptyInput),
        ("testSepEndBy1FailureWithSeparator", testSepEndBy1FailureWithSeparator),
        ("testSepEndBy1Success", testSepEndBy1Success),
        ("testSepEndBy1SuccessWithOnlyValue", testSepEndBy1SuccessWithOnlyValue),
        ("testSepEndBy1SuccessWithValueAndSeparator", testSepEndBy1SuccessWithValueAndSeparator),
        ("testSepEndByFailure", testSepEndByFailure),
        ("testSepEndByFailureWithSeparator", testSepEndByFailureWithSeparator),
        ("testSepEndBySuccess", testSepEndBySuccess),
        ("testSepEndBySuccessWithEmptyInput", testSepEndBySuccessWithEmptyInput),
        ("testSepEndBySuccessWithOnlyValue", testSepEndBySuccessWithOnlyValue),
        ("testSepEndBySuccessWithValueAndSeparator", testSepEndBySuccessWithValueAndSeparator),
        ("testSequenceFailureWithMissingSequence", testSequenceFailureWithMissingSequence),
        ("testSequenceFailureWithParseFailure", testSequenceFailureWithParseFailure),
        ("testSequenceFailureWithUnavailableInput", testSequenceFailureWithUnavailableInput),
        ("testSequenceSuccess", testSequenceSuccess),
        ("testSequenceSuccessWithEmptyAccept", testSequenceSuccessWithEmptyAccept),
        ("testSkipMany1Failure", testSkipMany1Failure),
        ("testSkipMany1FailureWithEmptyInput", testSkipMany1FailureWithEmptyInput),
        ("testSkipMany1Success", testSkipMany1Success),
        ("testSkipManyFailure", testSkipManyFailure),
        ("testSkipManySuccess", testSkipManySuccess),
        ("testSkipManySuccessWithEmptyInput", testSkipManySuccessWithEmptyInput),
        ("testSymbolFailure", testSymbolFailure),
        ("testSymbolSuccess", testSymbolSuccess),
        ("testTraverseFailureWithMissingSequence", testTraverseFailureWithMissingSequence),
        ("testTraverseFailureWithParseFailure", testTraverseFailureWithParseFailure),
        ("testTraverseFailureWithUnavailableInput", testTraverseFailureWithUnavailableInput),
        ("testTraverseSuccess", testTraverseSuccess),
        ("testTraverseSuccessWithEmptyAccept", testTraverseSuccessWithEmptyAccept),
    ]
}

extension StringInputTests {
    static let __allTests = [
        ("testAdvanced", testAdvanced),
        ("testAdvancedTillEndOfString", testAdvancedTillEndOfString),
        ("testCharacterCountAndLineCount", testCharacterCountAndLineCount),
        ("testInit", testInit),
        ("testInitWithPosition", testInitWithPosition),
        ("testOriginalPositionNotAt0AndAdvanced", testOriginalPositionNotAt0AndAdvanced),
    ]
}

#if !os(macOS)
/// - Returns: All the tests in the module.
public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CombinatorsTextTests.__allTests),
        testCase(ParserTests.__allTests),
        testCase(StringInputTests.__allTests),
    ]
}
#endif
